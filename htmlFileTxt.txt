
   <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Graph visualization</title>
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
</head>
<body>
  <div id="visualization"></div>
  <script>
          const nodes = [];
    const edges = [];
    const inputObject = JSON.parse('###JSON_OBJECT###');

    // iterate over the object and create nodes and edges
    Object.entries(inputObject).forEach(([key, value]) => {
      nodes.push({ id: key, label: key });
      value.forEach((dependency) => {
        edges.push({ from: key, to: dependency });
      });
    });

    // create a new network visualization
    const container = document.getElementById('visualization');
container.style.height = '100vh';
container.style.width = '100%';
container.style.backgroundColor = 'black';

    const data = {
      nodes: nodes,
      edges: edges,
    };
const options = {
  nodes: {
    shape: "dot",
    size: 10,
    font:{
      color: 'white',
      background : 'black'
    },
    color :{
      background: '#eb6734',
      border: '#400c3b',
    },
  },
  edges: {
    width: 1,
    color: "#dbab97",
    smooth: {
      type: "curvedCW",
    },
        arrows:{
      to:{
        enabled: true
      }
    }
  },
  interaction: {
    hover: true,
    hoverConnectedEdges: true,
    selectable: true,
    selectConnectedEdges: true,
    multiselect: true
  },
  physics: {
    forceAtlas2Based: {
      gravitationalConstant: -26,
      centralGravity: 0.005,
      springLength: 230,
      springConstant: 0.18,
    },
    maxVelocity: 146,
    solver: "forceAtlas2Based",
    timestep: 0.35,
    stabilization: {iterations: 150},
  },
  layout: {
    hierarchical: {
      sortMethod: "directed",
      nodeSpacing: 400,
      levelSeparation: 300,
      treeSpacing: 400,
      blockShifting: true,
      edgeMinimization: true,
      parentCentralization: false,
      direction: "LR",
      shakeTowards: "roots",
      fixedHierarchy: false,
    },
  },
};

const network = new vis.Network(container, data, options);
network.on("selectNode", function(event) {
  var selectedNodeId = event.nodes[0];
  var selectedNode = network.body.data.nodes.get(selectedNodeId);
  console.log(selectedNode);
  var fileURL = selectedNode.id;
  const url = `${fileURL}`;
  const currentDirectory = window.location.href.split('/').slice(0, -1).join('/');
  const newUrl=url.replace('root' , currentDirectory);
window.open(newUrl, "_blank");



});
//network.on(events);
// Add event listener for hoverNode event
network.on('hoverNode', function (event) {
  var hoveredNodeId = event.node;
  var connectedEdges = network.getConnectedEdges(hoveredNodeId);
  var connectedNodes = network.getConnectedNodes(hoveredNodeId);
  network.body.data.nodes.update({ id: hoveredNodeId, color: { background: '#ffff00' }, font: { color: 'white' , background : "#615f5e" } })
  // Change font color and node color of connected nodes
  for (var i = 0; i < connectedNodes.length; i++) {
    var nodeId = connectedNodes[i];
    network.body.data.nodes.update({ id: nodeId, color: { background: '#ffff00' }, font: { color: 'white' , background : "#615f5e"  } });
  }

  // Change color of connected edges
  for (var i = 0; i < connectedEdges.length; i++) {
    var edgeId = connectedEdges[i];
    network.body.data.edges.update({ id: edgeId, color:'yellow' });
  }
  var allNodes = network.body.nodes;
    for (var nodeId in allNodes) {
    if (!connectedNodes.includes(nodeId) && nodeId !== hoveredNodeId) {
      network.body.data.nodes.update({id : nodeId , font:{ size : 0}});
    }
  }
});
network.on("blurNode", function (event) {
  var hoveredNodeId = event.node;
  var connectedEdges = network.getConnectedEdges(hoveredNodeId);
  var allNodes = network.body.nodes;
  for (var nodeId in allNodes) {
      network.body.data.nodes.update({ id: nodeId, color: { background: '#eb6734' }, font: { color: 'white' , background : "black" , size : 14} });
  }

  // Change color of connected edges
  for (var i = 0; i < connectedEdges.length; i++) {
    var edgeId = connectedEdges[i];
    network.body.data.edges.update({ id: edgeId, color: { background: 'black' } });
  }
});
  </script>
</body>
</html>
